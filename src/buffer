body.c:50:	de = fly_de_init(request->body->pool);
body.c:59:	nowbody = request->body->body;
body.c:61:	de->already_ptr = request->body->body;
body.c:62:	de->already_len = request->body->body_len;
body.c:69:	request->body->body = fly_pballoc(request->body->pool, de->decbuf->use_len);
body.c:70:	if (fly_unlikely_null(request->body->body))
body.c:72:	request->body->body_len = de->decbuf->use_len;
body.c:75:	fly_buffer_memcpy(request->body->body, fly_buffer_first_ptr(de->decbuf), fly_buffer_first_chain(de->decbuf),  de->decbuf->use_len);
body.c:78:	fly_pbfree(request->body->pool, nowbody);
body.c:79:	return request->body->body;
charset.c:340:				__nc = fly_pballoc(cs->request->pool, sizeof(struct __fly_charset));
context.c:170://		if (FLY_CONNECT_ON_SSL(res->request->connect)){
context.c:173://			SSL *ssl=res->request->connect->ssl;
encode.c:541://		if (FLY_CONNECT_ON_SSL(response->request->connect)){
encode.c:542://			SSL *ssl = response->request->connect->ssl;
encode.c:1061:	__pool = e->request->pool;
encode.h:177:				struct fly_context *__ctx = (__res)->request->ctx;	\
lang.c:339:				__nl = fly_pballoc(l->request->pool, sizeof(struct __fly_lang));
mime.c:175:	header = request->header;
mime.c:176:	if (fly_unlikely_null(request) || fly_unlikely_null(request->pool) || fly_unlikely_null(request->header))
mime.c:190:		return __fly_accept_parse(request->mime, accept);
mime.c:549:				param = fly_pballoc(mime->request->pool, sizeof(struct __fly_accept_param));
mime.c:604:				param = fly_pballoc(mime->request->pool, sizeof(struct __fly_accept_param));
mime.c:808:				ext = fly_pballoc(mime->request->pool, sizeof(struct __fly_accept_ext));
mime.c:951:	type->type_name = fly_pballoc(mime->request->pool, sizeof(char)*(type_len+1));
pyserver.c:272:	reqline = request->request_line;
pyserver.c:314:	PyObject *__pyhost = PyUnicode_FromString((const char *) request->connect->hostname);
pyserver.c:318:	PyLongObject *__pyport = (PyLongObject *) PyLong_FromString((const char *) request->connect->servname, NULL, 10);
pyserver.c:325:	if (request->header){
pyserver.c:326:		header = request->header;
pyserver.c:357:	if (request->encoding){
pyserver.c:362:		__acenlist = (PyListObject *) PyList_New((Py_ssize_t) request->encoding->accept_count);
pyserver.c:363:		fly_for_each_bllist(__b, &request->encoding->accepts){
pyserver.c:393:	if (request->language){
pyserver.c:398:		__aclalist = (PyListObject *) PyList_New((Py_ssize_t) request->language->lang_count);
pyserver.c:399:		fly_for_each_bllist(__b, &request->language->langs){
pyserver.c:428:	if (request->mime){
pyserver.c:433:		__acmmlist = (PyListObject *) PyList_New((Py_ssize_t) request->mime->accept_count);
pyserver.c:434:		fly_for_each_bllist(__b, &request->mime->accepts){
pyserver.c:473:	if (request->mime){
pyserver.c:478:		__accslist = (PyListObject *) PyList_New((Py_ssize_t) request->charset->charset_count);
pyserver.c:479:		fly_for_each_bllist(__b, &request->charset->charsets){
pyserver.c:509:	if (request->body){
pyserver.c:510:		body = request->body;
pyserver.c:536:	ctx = request->ctx;
pyserver.c:588:				res->header->state = request->stream->state;
request.c:1000:	conn = request->connect;
request.c:1090:	if (fly_content_length(request->header) == 0)
request.c:1096:	content_length = fly_content_length(request->header);
request.c:1102:	body = fly_body_init(request->ctx);
request.c:1105:	request->body = body;
request.c:1110:	ev = fly_content_encoding(request->header);
request.c:1133:	__mtype = request->request_line->method->type;
request.c:1136:	route = fly_found_route(route_reg, &request->request_line->uri, __mtype);
request.c:1141:		found_res = fly_found_content_from_path(mount, &request->request_line->uri, &pf);
request.c:1173:	if (request->request_line == NULL && \
request.c:1176:	request->request_line->version = fly_default_http_version();
request.c:1211:	if (fly_if_none_match(request->header, pf))
request.c:1213:	if (fly_if_modified_since(request->header, pf))
request.c:1221:	rc_304 = fly_pballoc(request->pool, sizeof(struct fly_response_content));
response.c:315:	size += strlen(res->request->request_line->method->name);
response.c:317:	size += (size_t) res->request->request_line->uri.len;
response.c:319:	size += strlen(res->request->request_line->version->full);
response.c:327:			res->request->request_line->method->name,
response.c:328:			res->request->request_line->uri.ptr,
response.c:329:			res->request->request_line->version->full
response.c:340:	(response->request->request_line->version->type == V2 ? \
response.c:345:	(response->request->request_line->request_line!=NULL ? fly_log_request_line_modify(response->request->request_line->request_line) : FLY_RESPONSE_NONSTRING)))
response.c:357:		response->request->connect->hostname,
response.c:359:		response->request->connect->servname,
response.c:361:		response->request->request_line != NULL ? __FLY_RESPONSE_LOGCONTENT_REQUEST_LINE : FLY_RESPONSE_NONSTRING,
response.c:470://	c_sockfd = response->request->connect->c_sockfd;
response.c:487://					if (FLY_CONNECT_ON_SSL(response->request->connect)){
response.c:488://						SSL *ssl=response->request->connect->ssl;
response.c:556://						if (FLY_CONNECT_ON_SSL(response->request->connect)){
response.c:557://							SSL *ssl=response->request->connect->ssl;
response.c:607://					if (FLY_CONNECT_ON_SSL(response->request->connect)){
response.c:608://						SSL *ssl=response->request->connect->ssl;
response.c:695://		if (FLY_CONNECT_ON_SSL(response->request->connect)){
response.c:696://			SSL *ssl=response->request->connect->ssl;
response.c:824:			&& !fly_encoding_matching(res->request->encoding, res->encoding_type)){
response.c:831:			res->encoding_type = fly_decided_encoding_type(res->request->encoding);
response.c:1589:		if (FLY_CONNECT_ON_SSL(res->request->connect)){
response.c:1590:			SSL *ssl=res->request->connect->ssl;
response.h:118:#define fly_disconnect_from_response(res)		((res)->request->connect->peer_closed = true)
v2.c:266:	__s->request->stream = __s;
v2.c:318:	ns->request->header = fly_header_init(ns->request->ctx);
v2.c:319:	if (fly_unlikely_null(ns->request->header))
v2.c:1809:		if (FLY_CONNECT_ON_SSL(res->request->connect)){
v2.c:1810:			SSL *ssl = res->request->connect->ssl;
v2.c:1835:			c_sockfd = res->request->connect->c_sockfd;
v2.c:1856:	e->event_data = (void *) res->request->connect;
v2.c:1875:	e->event_data = (void *) res->request->connect;
v2.c:1883:	e->event_data = (void *) res->request->connect;
v2.c:1916:	stream = res->request->stream;
v2.c:1960:				if (FLY_CONNECT_ON_SSL(res->request->connect)){
v2.c:1962:					SSL *ssl = res->request->connect->ssl;
v2.c:1988:					c_sockfd = res->request->connect->c_sockfd;
v2.c:2011:				if (FLY_CONNECT_ON_SSL(res->request->connect)){
v2.c:2012:					SSL *ssl=res->request->connect->ssl;
v2.c:2058:			c_sockfd = res->request->connect->c_sockfd;
v2.c:2060:				if (FLY_CONNECT_ON_SSL(res->request->connect)){
v2.c:2061:					SSL *ssl=res->request->connect->ssl;
v2.c:2117:				if (FLY_CONNECT_ON_SSL(res->request->connect)){
v2.c:2118:					SSL *ssl=res->request->connect->ssl;
v2.c:2361:	stream = res->request->stream;
v2.c:2514:	frame->payload = (!ack && count) ? fly_pballoc(stream->request->pool, frame->payload_len) : NULL;
v2.c:2543:		if (FLY_CONNECT_ON_SSL(frame->stream->request->connect)){
v2.c:2544:			SSL *ssl = frame->stream->request->connect->ssl;
v2.c:2571:			c_sockfd = frame->stream->request->connect->c_sockfd;
v2.c:3238:	if (fly_header_add(stream->request->header, (fly_hdr_name *) name, name_len, (fly_hdr_value *) value, value_len) == -1)
v2.c:3272:		if (fly_hv2_huffman_decode(stream->request->header->pool, &buf, &len, value, value_len, __c) == -1)
v2.c:3275:		if (fly_header_addbv(fly_buffer_first_chain(buf), stream->request->header, (fly_hdr_name *) name, name_len, fly_buffer_first_useptr(buf), len) == -1)
v2.c:3286:		if (fly_header_addbv(__c, stream->request->header, (fly_hdr_name *) name, name_len, (fly_hdr_value *) value, value_len) == -1)
v2.c:3308:	if (huffman_name && fly_hv2_huffman_decode(stream->request->header->pool, &nbuf, &nlen, name, name_len, __nc) == -1)
v2.c:3311:	if (huffman_value && fly_hv2_huffman_decode(stream->request->header->pool, &vbuf, &vlen, value, value_len, __vc) == -1)
v2.c:3319:	__n = fly_pballoc(stream->request->header->pool, FLY_HV2_ADD_HEADER_NAME_LEN);
v2.c:3322:	__v = fly_pballoc(stream->request->header->pool, FLY_HV2_ADD_HEADER_VALUE_LEN);
v2.c:3324:		fly_pbfree(stream->request->header->pool, __n);
v2.c:3338:	if (fly_header_add(stream->request->header, __n, FLY_HV2_ADD_HEADER_NAME_LEN, __v, FLY_HV2_ADD_HEADER_VALUE_LEN) == -1)
v2.c:3354:	fly_pbfree(stream->request->header->pool, __n);
v2.c:3355:	fly_pbfree(stream->request->header->pool, __v);
v2.c:3928:	content_length = fly_content_length(request->header);
v2.c:3934:	ev = fly_content_encoding_s(request->header);
v2.c:3954:	__mtype = request->request_line->method->type;
v2.c:3957:	route = fly_found_route(route_reg, &request->request_line->uri, __mtype);
v2.c:3960:		if (fly_is_uri_index(&request->request_line->uri)){
v2.c:3970:		found_res = fly_found_content_from_path(mount, &request->request_line->uri, &pf);
v2.c:3997:	if (fly_if_none_match(request->header, pf))
v2.c:3999:	if (fly_if_modified_since(request->header, pf))
v2.c:4075:		res->header = fly_header_init(res->request->ctx);
v2.c:4076:	stream = res->request->stream;
v2.c:4154:			&& !fly_encoding_matching(res->request->encoding, res->encoding_type)){
v2.c:4161:			res->encoding_type = fly_decided_encoding_type(res->request->encoding);
v2.c:4230:	e->event_data = (void *) res->request->connect;
v2.c:4243:	e->event_data = (void *) res->request->connect;
