CC = gcc
CPP = g++
OS = $(shell uname)
INCLUDE_PATH := -I/usr/local/include -I/usr/include
ifdef DEBUG
# -fsanitize=address,leak
CFLAG := -g3 -O0 -W -Wall -Werror -Wcast-align $(INCLUDE_PATH) -Wno-deprecated-declarations -Wno-error=comment
else
CFLAG := -O0 -W -Wall -Werror -Wcast-align $(INCLUDE_PATH) -Wno-deprecated-declarations
endif
LDFLAGS := -L /usr/lib -L /usr/local/lib -L ./fly/lib
TARGET = fly
BUILD_FILES := server.o response.o header.o alloc.o mount.o method.o version.o math.o request.o util.o connect.o body.o route.o fsignal.o mime.o encode.o log.o worker.o master.o ftime.o event.o context.o err.o charset.o lang.o cache.o scheme.o buffer.o rbtree.o ssl.o v2.o queue.o bllist.o conf.o uri.o
SRC := src
SRC_FILES := $(BUILD_FILES:%.o=%.c)
SOURCE_FILES := $(addprefix $(SRC)/, $(SRC_FILES))
PYSOURCE_FILES := $(PYBUILD_FILES:%.o=%.c)
.PHONY: all clean lib build test

MAJOR_VERSION:=0
MINOR_VERSION:=0
RELEA_VERSION:=0

DEPEND_LIBS := -lz -lcrypto -lssl -lbrotlienc -lbrotlidec
ifeq ($(OS), Darwin)
	CFLAG := $(CFLAG) -I/usr/local/opt/openssl/include -I/usr/local/opt/zlib/include
	LDFLAGS := $(LDFLAGS) -L/usr/local/opt/openssl/lib -L/usr/local/opt/zlib/lib
endif
OPTIONAL_LIBS := -lbrotlidec -lbrotlienc

SRCDIR := src
LIBDIR := $(PWD)/fly/lib
ifeq ($(OS), Darwin)
	LIBNAME := lib$(TARGET).$(MAJOR_VERSION).dylib
else
	LIBNAME := lib$(TARGET).so.$(MAJOR_VERSION)
endif
BUILDDIR := build
TESTDIR := tests
TESTPRE := __fly_
TEST_FILES := test_server.cpp test_signal.cpp test_fs.cpp test_route.cpp test_request.cpp test_util.cpp test_math.cpp test_body.cpp test_connect.cpp test_log.cpp
ifdef DEBUG
MACROS := $(MACROS) -D DEBUG
endif
ifdef DEBUG_BODY
MACROS := $(MACROS) -D DEBUG_BODY
endif
ifdef DEBUG_RESPONSE_ERROR
MACROS := $(MACROS) -D DEBUG_RESPONSE_ERROR
endif
ifdef DEBUG_EMERGE
MACROS := $(MACROS) -D DEBUG_EMERGE
endif
ifdef DEBUG
PYTHON := python3
else
PYTHON := python3
endif

all: build
	./$(BUILDDIR)/$(TARGET)

debug: build
	gdb ./$(BUILDDIR)/$(TARGET)

leak: build
	valgrind --leak-check=full --show-leak-kinds=all ./$(BUILDDIR)/$(TARGET)

build:	$(SOURCE_FILES)
	@mkdir -p $(BUILDDIR)
	gcc -o $(BUILDDIR)/$(TARGET) $^

pybuild:
	$(PYTHON) setup.py build
	cp build/lib*/fly/_fly_server.* fly/

ifeq ($(OS), Darwin)
 lib: $(SOURCE_FILES)
	@mkdir -p $(LIBDIR)
	$(CC) $(CFLAG) -dynamiclib $(MACROS) -o $(LIBDIR)/$(LIBNAME) $(filter-out main.c, $^) $(LDFLAGS) $(DEPEND_LIBS)
	ln -fs  $(LIBDIR)/$(LIBNAME) $(LIBDIR)/lib$(TARGET).dylib
else
 lib: $(SOURCE_FILES)
	@mkdir -p $(LIBDIR)
	$(CC) $(CFLAG) -shared $(MACROS) -fPIC -Wl,-soname,$(LIBNAME) -o $(LIBDIR)/$(LIBNAME).$(MINOR_VERSION).$(RELEA_VERSION) $(filter-out main.c, $^)  $(DEPEND_LIBS) $(LDFLAGS)
	ln -sf  $(LIBDIR)/$(LIBNAME).$(MINOR_VERSION).$(RELEA_VERSION) $(LIBDIR)/$(LIBNAME)
	ln -fs  $(LIBDIR)/$(LIBNAME) $(LIBDIR)/lib$(TARGET).so
endif

test: test_placeholder clean_lib lib $(addprefix $(TESTPRE), $(TEST_FILES))
test_placeholder:
	@echo -en "\t>>> fly test start <<< \n"
	@mkdir -p $(TESTDIR)

$(TESTPRE)%.cpp:
		@echo "Target: $@"
		@echo "Source: $(subst $(TESTPRE),,$@)"
		$(CPP) -g3 -O0 -Isrc -I. $(MACROS) -o $(TESTDIR)/$(addprefix $(TESTPRE), $(subst $(TESTPRE),, $@)) $(addprefix $(TESTDIR)/, $(subst $(TESTPRE),,$@)) -L ./$(LIBDIR) $(DEPEND_LIBS) -lpthread -lfly
		LD_LIBRARY_PATH=fly/lib ./$(TESTDIR)/$(addprefix $(TESTPRE), $(subst $(TESTPRE),,$@))
$(TESTPRE)%.c:
		@echo "Target: $@"
		@echo "Source: $(subst $(TESTPRE),,$@)"
		$(CC) -g3 -gdwarf -O0 -Isrc -I. $(MACROS) -o $(TESTDIR)/$(addprefix $(TESTPRE), $(subst $(TESTPRE),, $@)) $(addprefix $(TESTDIR)/, $(subst $(TESTPRE),,$@)) -L ./$(LIBDIR) $(DEPEND_LIBS) -lpthread -lfly
		LD_LIBRARY_PATH=$(LIBDIR) ./$(TESTDIR)/$(addprefix $(TESTPRE), $(subst $(TESTPRE),,$@))
b$(TESTPRE)%.c:
		@echo "Target: $@"
		@echo "Source: $(subst b$(TESTPRE),,$@)"
		@ls -l $(LIBDIR)
		LD_LIBRARY_PATH=$(LIBDIR) $(CC) -g3 -O0 -Isrc -I. $(MACROS) -o $(TESTDIR)/$(addprefix $(TESTPRE), $(subst b$(TESTPRE),, $@)) $(addprefix $(TESTDIR)/, $(subst b$(TESTPRE),,$@)) -lfly -L $(LIBDIR) $(CFLAG)

%.o:	%.c
	gcc -c $(CFLAG) -o $@ $<

clean_lib:
	if [ "$(OS)" = "Darwin" ]; then \
		rm -rf $(LIBDIR)/lib$(TARGET).dylib*; \
	else \
		rm -f $(LIBDIR)/lib$(TARGET).so*; \
	fi;
	rm -f $(LIBDIR)/_fly_server*
	rm -rf $(LIBDIR)/__pycache__
	rm -f $(SRCDIR)/*.o

clean: clean_lib
	rm -f src/*.o
	rm -f src/*.lo
	rm -f .*.swp
	rm -f fly/_fly_server.*
	rm -rf build
	rm -rf $(TESTDIR)/__fly_*
